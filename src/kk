"use strict"
const fs = require('fs');
const math = require('mathjs');

// class Rose {
//     constructor(sepallength_, sepalwidth_, petallength_, petalwidth_, label_) {
//         let sepallength = sepallength_;
//         let sepalwidth = sepalwidth_;
//         let petallength = petallength_;
//         let petalwidth = petalwidth_;
//         let label = label_;

//         this.getSepallength = () => sepallength;
//         this.getSepalwidth = () => sepalwidth;
//         this.getPetallength = () => petallength;
//         this.getPetalwidth = () => petalwidth;
//         this.getLabel = () => label;

//         this.setSepallength = (a_) => sepallength = a_;
//         this.setSepalwidth = (a_) => sepalwidth = a_;
//         this.setPetallength = (a_) => petallength = a_;
//         this.setPetalwidth = (a_) => petallength = a_;
//         this.setLabel = (a_) => label = a_;
//     }
// }

const readCsvFile = (path) => fs.readFileSync(path, 'utf8').split('\n');

const euclidianDistance = (rose1, rose2) => {
    const soma = math.pow((rose1.split(',')[0] - rose2.split(',')[0]), 2) +
        math.pow((rose1.split(',')[1] - rose2.split(',')[1], 2)) +
        math.pow((rose1.split(',')[2] - rose2.split(',')[2]), 2) +
        math.pow((rose1.split(',')[3] - rose2.split(',')[3]), 2);
    return math.sqrt(soma);
};

const calcularDiferenÃ§a = (roses, nova_rose, k) => {
    let contk = 0;
    const tamRoses = roses.length;
    let list_DistRoses = [];

    for (let i = 0; i < tamRoses; i++) {
        let dist = euclidianDistance(roses[i], nova_rose);
        list_DistRoses.push({
            dist: dist,
            index: i
        });
    }
    let label_ser = [0, 0, 0];

    for (let j = 0; j < list_DistRoses.length; j++) {
        if (contk === k) {
            break;
        }
        contk++;
        let classe = roses[list_DistRoses[j].index].split(',')[4];
        if (classe === 0) {
            label_ser[0]++;
        } else if (classe === 1) {
            label_ser[1]++;
        } else {
            label_ser[2]++;
        }
    }
    let classificacao = '';

    if (label_ser[0] >= label_ser[1] && label_ser[0] >= label_ser[2]) {
        classificacao = label_ser[0];
    } else if (label_ser[1] >= label_ser[0] && label_ser[1] >= label_ser[2]) {
        classificacao = label_ser[1];
    } else {
        classificacao = label_ser[2];
    }
}

const read = (readCsvFile('./files/treinamento.csv').split('\n'));

console.log(real.split)